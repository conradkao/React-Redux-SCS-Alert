'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationTextDetails = exports.NotificationButton = exports.InlineNotification = exports.ToastNotification = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotificationButton = function (_Component) {
  _inherits(NotificationButton, _Component);

  function NotificationButton() {
    _classCallCheck(this, NotificationButton);

    return _possibleConstructorReturn(this, (NotificationButton.__proto__ || Object.getPrototypeOf(NotificationButton)).apply(this, arguments));
  }

  _createClass(NotificationButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          ariaLabel = _props.ariaLabel,
          className = _props.className,
          iconDescription = _props.iconDescription,
          type = _props.type,
          name = _props.name,
          notificationType = _props.notificationType,
          other = _objectWithoutProperties(_props, ['ariaLabel', 'className', 'iconDescription', 'type', 'name', 'notificationType']);

      var buttonClasses = (0, _classnames2.default)({
        'bx--toast-notification__close-button': notificationType === 'toast',
        'bx--inline-notification__close-button': notificationType === 'inline'
      }, className);

      var iconClasses = (0, _classnames2.default)({
        'bx--toast-notification__icon': notificationType === 'toast',
        'bx--inline-notification__close-icon': notificationType === 'inline'
      });

      return _react2.default.createElement(
        'button',
        _extends({}, other, { type: type, className: buttonClasses }),
        _react2.default.createElement(_Icon2.default, {
          description: iconDescription,
          className: iconClasses,
          'aria-label': ariaLabel,
          name: name
        })
      );
    }
  }]);

  return NotificationButton;
}(_react.Component);

NotificationButton.propTypes = {
  className: _propTypes2.default.string,
  ariaLabel: _propTypes2.default.string,
  type: _propTypes2.default.string,
  iconDescription: _propTypes2.default.string,
  name: _propTypes2.default.string,
  notificationType: _propTypes2.default.oneOf(['toast', 'inline'])
};
NotificationButton.defaultProps = {
  ariaLabel: 'close notificaion',
  notificationType: 'toast',
  type: 'button',
  iconDescription: 'close icon',
  name: 'close'
};

var NotificationTextDetails = function (_Component2) {
  _inherits(NotificationTextDetails, _Component2);

  function NotificationTextDetails() {
    _classCallCheck(this, NotificationTextDetails);

    return _possibleConstructorReturn(this, (NotificationTextDetails.__proto__ || Object.getPrototypeOf(NotificationTextDetails)).apply(this, arguments));
  }

  _createClass(NotificationTextDetails, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          title = _props2.title,
          subtitle = _props2.subtitle,
          caption = _props2.caption,
          notificationType = _props2.notificationType,
          other = _objectWithoutProperties(_props2, ['title', 'subtitle', 'caption', 'notificationType']);

      if (notificationType === 'toast') {
        return _react2.default.createElement(
          'div',
          _extends({}, other, { className: 'bx--toast-notification__details' }),
          _react2.default.createElement(
            'h3',
            { className: 'bx--toast-notification__title' },
            title
          ),
          _react2.default.createElement(
            'p',
            { className: 'bx--toast-notification__subtitle' },
            subtitle
          ),
          _react2.default.createElement(
            'p',
            { className: 'bx--toast-notification__caption' },
            caption
          )
        );
      }

      if (notificationType === 'inline') {
        return _react2.default.createElement(
          'div',
          _extends({}, other, { className: 'bx--inline-notification__text-wrapper' }),
          _react2.default.createElement(
            'p',
            { className: 'bx--inline-notification__title' },
            title
          ),
          _react2.default.createElement(
            'p',
            { className: 'bx--inline-notification__subtitle' },
            subtitle
          )
        );
      }
    }
  }]);

  return NotificationTextDetails;
}(_react.Component);

NotificationTextDetails.propTypes = {
  title: _propTypes2.default.string,
  subtitle: _propTypes2.default.string,
  caption: _propTypes2.default.string,
  notificationType: _propTypes2.default.oneOf(['toast', 'inline'])
};
NotificationTextDetails.defaultProps = {
  title: 'title',
  subtitle: 'subtitle',
  caption: 'caption',
  notificationType: 'toast'
};

var ToastNotification = function (_Component3) {
  _inherits(ToastNotification, _Component3);

  function ToastNotification() {
    var _ref;

    var _temp, _this3, _ret;

    _classCallCheck(this, ToastNotification);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this3 = _possibleConstructorReturn(this, (_ref = ToastNotification.__proto__ || Object.getPrototypeOf(ToastNotification)).call.apply(_ref, [this].concat(args))), _this3), _this3.state = {
      open: true
    }, _this3.handleCloseButtonClick = function (evt) {
      _this3.setState({ open: false });
      _this3.props.onCloseButtonClick(evt);
    }, _this3.useIconName = function (kindProp) {
      var isSuccess = kindProp === 'success';
      return isSuccess ? 'checkmark--glyph' : kindProp + '--glyph';
    }, _temp), _possibleConstructorReturn(_this3, _ret);
  }

  _createClass(ToastNotification, [{
    key: 'render',
    value: function render() {
      if (!this.state.open) {
        return null;
      }

      var _props3 = this.props,
          role = _props3.role,
          notificationType = _props3.notificationType,
          onCloseButtonClick = _props3.onCloseButtonClick,
          iconDescription = _props3.iconDescription,
          className = _props3.className,
          caption = _props3.caption,
          subtitle = _props3.subtitle,
          title = _props3.title,
          kind = _props3.kind,
          other = _objectWithoutProperties(_props3, ['role', 'notificationType', 'onCloseButtonClick', 'iconDescription', 'className', 'caption', 'subtitle', 'title', 'kind']);

      var classes = (0, _classnames2.default)('bx--toast-notification', _defineProperty({}, 'bx--toast-notification--' + this.props.kind, this.props.kind), className);

      return _react2.default.createElement(
        'div',
        _extends({}, other, { role: role, kind: kind, className: classes }),
        _react2.default.createElement(NotificationTextDetails, {
          title: title,
          subtitle: subtitle,
          caption: caption,
          notificationType: notificationType
        }),
        _react2.default.createElement(NotificationButton, {
          iconDescription: iconDescription,
          notificationType: notificationType,
          onClick: this.handleCloseButtonClick
        })
      );
    }
  }]);

  return ToastNotification;
}(_react.Component);

ToastNotification.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  kind: _propTypes2.default.oneOf(['error', 'info', 'success', 'warning']).isRequired,
  title: _propTypes2.default.string.isRequired,
  subtitle: _propTypes2.default.string.isRequired,
  role: _propTypes2.default.string.isRequired,
  caption: _propTypes2.default.string,
  onCloseButtonClick: _propTypes2.default.func,
  iconDescription: _propTypes2.default.string.isRequired,
  notificationType: _propTypes2.default.string
};
ToastNotification.defaultProps = {
  kind: 'error',
  title: 'provide a title',
  subtitle: 'provide a subtitle',
  caption: 'provide a caption',
  role: 'alert',
  notificationType: 'toast',
  iconDescription: 'closes notification',
  onCloseButtonClick: function onCloseButtonClick() {}
};

var InlineNotification = function (_Component4) {
  _inherits(InlineNotification, _Component4);

  function InlineNotification() {
    var _ref2;

    var _temp2, _this4, _ret2;

    _classCallCheck(this, InlineNotification);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this4 = _possibleConstructorReturn(this, (_ref2 = InlineNotification.__proto__ || Object.getPrototypeOf(InlineNotification)).call.apply(_ref2, [this].concat(args))), _this4), _this4.state = {
      open: true
    }, _this4.handleCloseButtonClick = function (evt) {
      _this4.setState({ open: false });
      _this4.props.onCloseButtonClick(evt);
    }, _this4.useIconName = function (kindProp) {
      var isSuccess = kindProp === 'success';
      return isSuccess ? 'checkmark--glyph' : kindProp + '--glyph';
    }, _temp2), _possibleConstructorReturn(_this4, _ret2);
  }

  _createClass(InlineNotification, [{
    key: 'render',
    value: function render() {
      if (!this.state.open) {
        return null;
      }

      var _props4 = this.props,
          role = _props4.role,
          notificationType = _props4.notificationType,
          onCloseButtonClick = _props4.onCloseButtonClick,
          iconDescription = _props4.iconDescription,
          className = _props4.className,
          subtitle = _props4.subtitle,
          title = _props4.title,
          kind = _props4.kind,
          other = _objectWithoutProperties(_props4, ['role', 'notificationType', 'onCloseButtonClick', 'iconDescription', 'className', 'subtitle', 'title', 'kind']);

      var classes = (0, _classnames2.default)('bx--inline-notification', _defineProperty({}, 'bx--inline-notification--' + this.props.kind, this.props.kind), className);

      return _react2.default.createElement(
        'div',
        _extends({}, other, { role: role, kind: kind, className: classes }),
        _react2.default.createElement(
          'div',
          { className: 'bx--inline-notification__details' },
          _react2.default.createElement(_Icon2.default, {
            description: this.props.iconDescription,
            className: 'bx--inline-notification__icon',
            'aria-label': 'close',
            name: this.useIconName(kind)
          }),
          _react2.default.createElement(NotificationTextDetails, {
            title: title,
            subtitle: subtitle,
            notificationType: notificationType
          })
        ),
        _react2.default.createElement(NotificationButton, {
          notificationType: notificationType,
          onClick: this.handleCloseButtonClick
        })
      );
    }
  }]);

  return InlineNotification;
}(_react.Component);

// Deprecated

InlineNotification.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  kind: _propTypes2.default.oneOf(['error', 'info', 'success', 'warning']).isRequired,
  title: _propTypes2.default.string.isRequired,
  subtitle: _propTypes2.default.string.isRequired,
  role: _propTypes2.default.string.isRequired,
  onCloseButtonClick: _propTypes2.default.func,
  iconDescription: _propTypes2.default.string.isRequired,
  notificationType: _propTypes2.default.string
};
InlineNotification.defaultProps = {
  role: 'alert',
  notificationType: 'inline',
  iconDescription: 'closes notification',
  onCloseButtonClick: function onCloseButtonClick() {}
};

var Notification = function (_Component5) {
  _inherits(Notification, _Component5);

  function Notification() {
    var _ref3;

    var _temp3, _this5, _ret3;

    _classCallCheck(this, Notification);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _ret3 = (_temp3 = (_this5 = _possibleConstructorReturn(this, (_ref3 = Notification.__proto__ || Object.getPrototypeOf(Notification)).call.apply(_ref3, [this].concat(args))), _this5), _this5.state = {
      open: true
    }, _this5.handleCloseButtonClick = function (evt) {
      _this5.setState({ open: false });
      _this5.props.onCloseButtonClick(evt);
    }, _this5.useIconName = function (kindProp) {
      var isSuccess = kindProp === 'success';
      return isSuccess ? 'checkmark--glyph' : kindProp + '--glyph';
    }, _temp3), _possibleConstructorReturn(_this5, _ret3);
  }

  _createClass(Notification, [{
    key: 'render',
    value: function render() {
      if (!this.state.open) {
        return null;
      }

      var _props5 = this.props,
          onCloseButtonClick = _props5.onCloseButtonClick,
          iconDescription = _props5.iconDescription,
          className = _props5.className,
          caption = _props5.caption,
          subtitle = _props5.subtitle,
          title = _props5.title,
          kind = _props5.kind,
          other = _objectWithoutProperties(_props5, ['onCloseButtonClick', 'iconDescription', 'className', 'caption', 'subtitle', 'title', 'kind']);

      var notificationClasses = {
        toast: (0, _classnames2.default)('bx--toast-notification', _defineProperty({}, 'bx--toast-notification--' + this.props.kind, this.props.kind), className),
        inline: (0, _classnames2.default)('bx--inline-notification', _defineProperty({}, 'bx--inline-notification--' + this.props.kind, this.props.kind), className)
      };

      var toastHTML = _react2.default.createElement(
        'div',
        _extends({}, other, { role: 'alert', kind: kind, className: notificationClasses.toast }),
        _react2.default.createElement(NotificationTextDetails, {
          title: title,
          subtitle: subtitle,
          caption: caption,
          notificationType: 'toast'
        }),
        _react2.default.createElement(NotificationButton, {
          notificationType: 'toast',
          onClick: this.handleCloseButtonClick
        })
      );

      var inlineHTML = _react2.default.createElement(
        'div',
        _extends({}, other, { role: 'alert', kind: kind, className: notificationClasses.inline }),
        _react2.default.createElement(
          'div',
          { className: 'bx--inline-notification__details' },
          _react2.default.createElement(_Icon2.default, {
            description: this.props.iconDescription,
            className: 'bx--inline-notification__icon',
            'aria-label': 'close',
            name: this.useIconName(kind)
          }),
          _react2.default.createElement(NotificationTextDetails, {
            title: title,
            subtitle: subtitle,
            notificationType: 'inline'
          })
        ),
        _react2.default.createElement(NotificationButton, {
          notificationType: 'inline',
          onClick: this.handleCloseButtonClick
        })
      );

      return caption ? toastHTML : inlineHTML;
    }
  }]);

  return Notification;
}(_react.Component);

Notification.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  kind: _propTypes2.default.oneOf(['error', 'info', 'success', 'warning']).isRequired,
  title: _propTypes2.default.string.isRequired,
  subtitle: _propTypes2.default.string.isRequired,
  caption: _propTypes2.default.string,
  onCloseButtonClick: _propTypes2.default.func,
  iconDescription: _propTypes2.default.string.isRequired
};
Notification.defaultProps = {
  onCloseButtonClick: function onCloseButtonClick() {},
  iconDescription: 'closes notification',
  title: 'Provide a title',
  subtitle: 'Provide a subtitle'
};
exports.default = Notification;
exports.ToastNotification = ToastNotification;
exports.InlineNotification = InlineNotification;
exports.NotificationButton = NotificationButton;
exports.NotificationTextDetails = NotificationTextDetails;